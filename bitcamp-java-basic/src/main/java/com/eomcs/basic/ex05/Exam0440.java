// 비트 이동 연산자 : 응용 I

package com.eomcs.basic.ex05;

public class Exam0440 {
  public static void main(String[] args) {

    // i 변수에 들어있는 값을 순서대로 1바이트씩 잘라서 
    // a,b,c,d 변수에 넣은 다음 각 변수의 값을 16진수로 출력하라!
    int i = 0x27a130ff;
    int a, b, c, d;
    // a에는 27, b에는 a1, c에는 30,d에는 ff를 담는다.
    
    System.out.println(i); // 664875263
    System.out.println(Integer.toHexString(i));

    //   00100111_10100001_00110000_11111111    => 0x27a130ff 
    
    a = i >> 24; 
    //   00000000_00000000_00000000_00100111    => 0x00000027
    
    b = (i >> 16) & 0xff; 
    // 원하는 값이 들어있는 1바이트를 오른쪽 끝으로 미루고 나서 (i >> 16)
    // 추출한다. ( & 0xff)
    // & 연산은 둘 다 1인 경우에만 1이 나오므로, 1을 추출할 수 있다.
    //   00000000_00000000_00100111_10100001    => 0x000027a1
    // & 00000000_00000000_00000000_11111111    => 0x000000ff
    // --------------------------------------
    //   00000000_00000000_00000000_10100001    => 0x000000a1

    c = (i >> 8) & 0xff;
    //   00000000_00100111_10100001_00110000    => 0x0027a130
    // & 00000000_00000000_00000000_11111111    => 0x000000ff
    // --------------------------------------
    //   00000000_00000000_00000000_00110000    => 0x00000030

    d = i & 0xff;
    //   00100111_10100001_00110000_11111111    => 0x27a130ff (이동 X)
    // & 00000000_00000000_00000000_11111111    => 0x000000ff
    // --------------------------------------
    //   00000000_00000000_00000000_11111111    => 0x000000ff

    System.out.println(Integer.toHexString(a));
    System.out.println(Integer.toHexString(b));
    System.out.println(Integer.toHexString(c));
    System.out.println(Integer.toHexString(d));
  }
}
